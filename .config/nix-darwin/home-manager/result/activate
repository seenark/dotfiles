#!/nix/store/bsa1v1mr7c42a0yd90ncnchcs18ylm4b-bash-5.2p26/bin/bash
set -eu
set -o pipefail

cd $HOME

export PATH="/nix/store/bsa1v1mr7c42a0yd90ncnchcs18ylm4b-bash-5.2p26/bin:/nix/store/7cifxhcdg7a6f0sj6fw68d97mqa6bkbb-coreutils-9.4/bin:/nix/store/575sjnqgcparl0i5jp1h5glghg6c9wnw-diffutils-3.10/bin:/nix/store/mxvqp1mpk5a7n4k25pn000lribabn92k-findutils-4.9.0/bin:/nix/store/g5d5h908xyg09sdfq854yxw04jkmfwl0-gettext-0.21.1/bin:/nix/store/i93m7189qp888xfhcibfb7qs1ak184p6-gnugrep-3.11/bin:/nix/store/051x0h9iyrbqibxn8nm2p88yasx8gz3b-gnused-4.9/bin:/nix/store/59r06awlqdsw1fpvwcy2dg65l0g09vdp-jq-1.7.1-bin/bin:/nix/store/nrrxippa056dwfyzg1y81d9m5hkyxiqx-ncurses-6.4/bin:$(/nix/store/7cifxhcdg7a6f0sj6fw68d97mqa6bkbb-coreutils-9.4/bin/dirname $(/nix/store/7cifxhcdg7a6f0sj6fw68d97mqa6bkbb-coreutils-9.4/bin/readlink -m $(type -p nix-env)))"
export TEXTDOMAIN=hm-modules
export TEXTDOMAINDIR=/nix/store/krw29j249jj7b2pi6hf9vxzlszs86wl9-hm-modules-messages
source /nix/store/zhrjg6wxrxmdlpn6iapzpp2z2vylpvw5-home-manager.sh


# Moves the existing profile from /nix or $XDG_STATE_HOME/home-manager to
# $XDG_STATE_HOME/nix to match changed behavior in Nix 2.14. See
# https://github.com/NixOS/nix/pull/5226.
function migrateProfile() {
    declare -r stateHome="${XDG_STATE_HOME:-$HOME/.local/state}"
    declare -r userNixStateDir="$stateHome/nix"
    declare -r hmStateDir="$stateHome/home-manager"

    declare -r globalNixStateDir="${NIX_STATE_DIR:-/nix/var/nix}"
    declare -r globalProfilesDir="$globalNixStateDir/profiles/per-user/$USER"

    if [[ -e $globalProfilesDir/home-manager ]]; then
        declare -r oldProfilesDir="$globalProfilesDir"
    elif [[ -e $hmStateDir/profiles/home-manager ]]; then
        declare -r oldProfilesDir="$hmStateDir/profiles"
    fi

    declare -r newProfilesDir="$userNixStateDir/profiles"

    if [[ -v oldProfilesDir && -e $newProfilesDir ]]; then
        if [[ ! -e $newProfilesDir/home-manager ]]; then
            _i 'Migrating profile from %s to %s' "$oldProfilesDir" "$newProfilesDir"
            for p in "$oldProfilesDir"/home-manager-*; do
                declare name="${p##*/}"
                nix-store --realise "$p" --add-root "$newProfilesDir/$name" > /dev/null
            done
            cp -P "$oldProfilesDir/home-manager" "$newProfilesDir"
        fi

        rm "$oldProfilesDir/home-manager" "$oldProfilesDir"/home-manager-*
    fi
}

function setupVars() {
    declare -r stateHome="${XDG_STATE_HOME:-$HOME/.local/state}"
    declare -r userNixStateDir="$stateHome/nix"
    declare -gr hmStatePath="$stateHome/home-manager"
    declare -r hmGcrootsDir="$hmStatePath/gcroots"

    declare -r globalNixStateDir="${NIX_STATE_DIR:-/nix/var/nix}"
    declare -r globalProfilesDir="$globalNixStateDir/profiles/per-user/$USER"
    declare -r globalGcrootsDir="$globalNixStateDir/gcroots/per-user/$USER"

    # If the user Nix profiles path exists, then place the HM profile there.
    # Otherwise, if the global Nix per-user state directory exists then use
    # that. If neither exists, then we give up.
    #
    # shellcheck disable=2174
    if [[ -d $userNixStateDir/profiles ]]; then
        declare -r profilesDir="$userNixStateDir/profiles"
    elif [[ -d $globalProfilesDir ]]; then
        declare -r profilesDir="$globalProfilesDir"
    else
        _iError 'Could not find suitable profile directory, tried %s and %s' \
                "$userNixStateDir/profiles" "$globalProfilesDir" >&2
        exit 1
    fi

    declare -gr hmDataPath="${XDG_DATA_HOME:-$HOME/.local/share}/home-manager"
    declare -gr genProfilePath="$profilesDir/home-manager"
    declare -gr newGenPath="/nix/store/cxbmwkm1ii75vwbshjpm7b0alciccav2-home-manager-generation";
    declare -gr newGenGcPath="$hmGcrootsDir/current-home"
    declare -gr legacyGenGcPath="$globalGcrootsDir/current-home"

    declare greatestGenNum
    greatestGenNum=$( \
        nix-env --list-generations --profile "$genProfilePath" \
            | tail -1 \
            | sed -E 's/ *([[:digit:]]+) .*/\1/')

    if [[ -n $greatestGenNum ]] ; then
        declare -gr oldGenNum=$greatestGenNum
        declare -gr newGenNum=$((oldGenNum + 1))
    else
        declare -gr newGenNum=1
    fi

    if [[ -e $genProfilePath ]] ; then
        declare -g oldGenPath
        oldGenPath="$(readlink -e "$genProfilePath")"
    fi

    _iVerbose "Sanity checking oldGenNum and oldGenPath"
    if [[ -v oldGenNum && ! -v oldGenPath
            || ! -v oldGenNum && -v oldGenPath ]]; then
        _i $'The previous generation number and path are in conflict! These\nmust be either both empty or both set but are now set to\n\n    \'%s\' and \'%s\'\n\nIf you don\'t mind losing previous profile generations then\nthe easiest solution is probably to run\n\n   rm %s/home-manager*\n   rm %s/current-home\n\nand trying home-manager switch again. Good luck!' \
           "${oldGenNum:-}" "${oldGenPath:-}" \
           "$profilesDir" "$hmGcrootsDir"
        exit 1
    fi
}

# Helper used to list content of a `nix profile` profile.
function nixProfileList() {
    # We attempt to use `--json` first (added in Nix 2.17). Otherwise attempt to
    # parse the legacy output format.
    {
        nix profile list --json 2>/dev/null \
            | jq -r --arg name "$1" '.elements[].storePaths[] | select(endswith($name))'
    } || {
        nix profile list \
            | { grep "$1\$" || test $? = 1; } \
            | cut -d ' ' -f 4
    }
}

# Helper used to remove a package from a Nix profile. Supports both `nix-env`
# and `nix profile`.
function nixProfileRemove() {
    # We don't use `cfg.profileDirectory` here because it defaults to
    # `/etc/profiles/per-user/<user>` which is constructed by NixOS or
    # nix-darwin and won't require uninstalling `home-manager-path`.
    if  [[ -e $HOME/.nix-profile/manifest.json \
        || -e ${XDG_STATE_HOME:-$HOME/.local/state}/nix/profile/manifest.json ]] ; then
        nixProfileList "$1" | xargs -rt $DRY_RUN_CMD nix profile remove $VERBOSE_ARG
    else
        if nix-env -q | grep -q "^$1$"; then
            run --quiet nix-env -e "$1"
        fi
    fi
}

function checkUsername() {
  local expectedUser="$1"

  if [[ "$USER" != "$expectedUser" ]]; then
    _iError 'Error: USER is set to "%s" but we expect "%s"' "$USER" "$expectedUser"
    exit 1
  fi
}

function checkHomeDirectory() {
  local expectedHome="$1"

  if ! [[ $HOME -ef $expectedHome ]]; then
    _iError 'Error: HOME is set to "%s" but we expect "%s"' "$HOME" "$expectedHome"
    exit 1
  fi
}

# Note, the VERBOSE_ECHO variable is deprecated and should not be used inside
# the Home Manager project. It is provided here for backwards compatibility.
if [[ -v VERBOSE ]]; then
    export VERBOSE_ECHO=echo
    export VERBOSE_ARG="--verbose"
    export VERBOSE_RUN=""
else
    export VERBOSE_ECHO=true
    export VERBOSE_ARG=""
    export VERBOSE_RUN=true
fi

_i "Starting Home Manager activation"

# Verify that we can connect to the Nix store and/or daemon. This will
# also create the necessary directories in profiles and gcroots.
_iVerbose "Sanity checking Nix"
nix-build --quiet --expr '{}' --no-out-link

# Also make sure that the Nix profiles path is created.
nix-env -q > /dev/null 2>&1 || true

migrateProfile
setupVars

# Note, the DRY_RUN_CMD and DRY_RUN_NULL variables are deprecated and should not
# be used inside the Home Manager project. They are provided here for backwards
# compatibility.
if [[ -v DRY_RUN ]] ; then
    _i "This is a dry run"
    export DRY_RUN_CMD=echo
    export DRY_RUN_NULL=/dev/stdout
else
    _iVerbose "This is a live run"
    export DRY_RUN_CMD=""
    export DRY_RUN_NULL=/dev/null
fi

if [[ -v VERBOSE ]]; then
    _i 'Using Nix version: %s' "$(nix-env --version)"
fi

_iVerbose "Activation variables:"
if [[ -v oldGenNum ]] ; then
    verboseEcho "  oldGenNum=$oldGenNum"
    verboseEcho "  oldGenPath=$oldGenPath"
else
    verboseEcho "  oldGenNum undefined (first run?)"
    verboseEcho "  oldGenPath undefined (first run?)"
fi
verboseEcho "  newGenPath=$newGenPath"
verboseEcho "  newGenNum=$newGenNum"
verboseEcho "  genProfilePath=$genProfilePath"
verboseEcho "  newGenGcPath=$newGenGcPath"
verboseEcho "  legacyGenGcPath=$legacyGenGcPath"


if [[ ! -v SKIP_SANITY_CHECKS ]]; then
  checkUsername 'atiwatseenark'
  checkHomeDirectory '/Users/atiwatseenark'
fi

_iNote "Activating %s" "checkFilesChanged"
function _cmp() {
  if [[ -d $1 && -d $2 ]]; then
    diff -rq "$1" "$2" &> /dev/null
  else
    cmp --quiet "$1" "$2"
  fi
}
declare -A changedFiles
_cmp '/nix/store/vk1rxrmfa509sdjihvk85s95wckpaykb-hm_LibraryFonts.homemanagerfontsversion' '/Users/atiwatseenark'/'Library/Fonts/.home-manager-fonts-version' \
  && changedFiles['Library/Fonts/.home-manager-fonts-version']=0 \
  || changedFiles['Library/Fonts/.home-manager-fonts-version']=1
unset -f _cmp


_iNote "Activating %s" "checkLaunchAgents"
checkLaunchAgents() {
  local oldDir newDir dstDir err
  oldDir=""
  err=0
  if [[ -n "${oldGenPath:-}" ]]; then
    oldDir="$(readlink -m "$oldGenPath/LaunchAgents")" || err=$?
    if (( err )); then
      oldDir=""
    fi
  fi
  newDir='/nix/store/68l5xa3jcafh73rmz6icjnmypzn4n8j7-home-manager-agents'
  dstDir='/Users/atiwatseenark/Library/LaunchAgents'

  local oldSrcPath newSrcPath dstPath agentFile agentName

  find -L "$newDir" -maxdepth 1 -name '*.plist' -type f -print0 \
      | while IFS= read -rd "" newSrcPath; do
    agentFile="${newSrcPath##*/}"
    agentName="${agentFile%.plist}"
    dstPath="$dstDir/$agentFile"
    oldSrcPath="$oldDir/$agentFile"

    if [[ ! -e "$dstPath" ]]; then
      continue
    fi

    if ! cmp --quiet "$oldSrcPath" "$dstPath"; then
      errorEcho "Existing file '$dstPath' is in the way of '$newSrcPath'"
      exit 1
    fi
  done
}

checkLaunchAgents


_iNote "Activating %s" "checkLinkTargets"
function checkNewGenCollision() {
  local newGenFiles
  newGenFiles="$(readlink -e "$newGenPath/home-files")"
  find "$newGenFiles" \( -type f -or -type l \) \
      -exec bash /nix/store/74934pg47rmvgzrjvnhg37h07i8mdqqc-check "$newGenFiles" {} +
}

checkNewGenCollision || exit 1


_iNote "Activating %s" "writeBoundary"


_iNote "Activating %s" "installPackages"
function nixReplaceProfile() {
  local oldNix="$(command -v nix)"

  nixProfileRemove 'home-manager-path'

  run $oldNix profile install $1
}

if [[ -e /Users/atiwatseenark/.nix-profile/manifest.json ]] ; then
  INSTALL_CMD="nix profile install"
  INSTALL_CMD_ACTUAL="nixReplaceProfile"
  LIST_CMD="nix profile list"
  REMOVE_CMD_SYNTAX='nix profile remove {number | store path}'
else
  INSTALL_CMD="nix-env -i"
  INSTALL_CMD_ACTUAL="run nix-env -i"
  LIST_CMD="nix-env -q"
  REMOVE_CMD_SYNTAX='nix-env -e {package name}'
fi

if ! $INSTALL_CMD_ACTUAL /nix/store/m8xgbpczqyxlqp499ywfp3jh4h1mcj84-home-manager-path ; then
  echo
  _iError $'Oops, Nix failed to install your new Home Manager profile!\n\nPerhaps there is a conflict with a package that was installed using\n"%s"? Try running\n\n    %s\n\nand if there is a conflicting package you can remove it with\n\n    %s\n\nThen try activating your Home Manager configuration again.' "$INSTALL_CMD" "$LIST_CMD" "$REMOVE_CMD_SYNTAX"
  exit 1
fi
unset -f nixReplaceProfile
unset INSTALL_CMD INSTALL_CMD_ACTUAL LIST_CMD REMOVE_CMD_SYNTAX


_iNote "Activating %s" "linkGeneration"
function linkNewGen() {
  _i "Creating home file links in %s" "$HOME"

  local newGenFiles
  newGenFiles="$(readlink -e "$newGenPath/home-files")"
  find "$newGenFiles" \( -type f -or -type l \) \
    -exec bash /nix/store/x43axywmbf2rlbsvpvrycglyf67kcjvf-link "$newGenFiles" {} +
}

function cleanOldGen() {
  if [[ ! -v oldGenPath || ! -e "$oldGenPath/home-files" ]] ; then
    return
  fi

  _i "Cleaning up orphan links from %s" "$HOME"

  local newGenFiles oldGenFiles
  newGenFiles="$(readlink -e "$newGenPath/home-files")"
  oldGenFiles="$(readlink -e "$oldGenPath/home-files")"

  # Apply the cleanup script on each leaf in the old
  # generation. The find command below will print the
  # relative path of the entry.
  find "$oldGenFiles" '(' -type f -or -type l ')' -printf '%P\0' \
    | xargs -0 bash /nix/store/d00fv51fc88drskb6r2i21z0xisn3fv9-cleanup "$newGenFiles"
}

cleanOldGen

if [[ ! -v oldGenPath || "$oldGenPath" != "$newGenPath" ]] ; then
  _i "Creating profile generation %s" $newGenNum
  if [[ -e "$genProfilePath"/manifest.json ]] ; then
    # Remove all packages from "$genProfilePath"
    # `nix profile remove '.*' --profile "$genProfilePath"` was not working, so here is a workaround:
    nix profile list --profile "$genProfilePath" \
      | cut -d ' ' -f 4 \
      | xargs -rt $DRY_RUN_CMD nix profile remove $VERBOSE_ARG --profile "$genProfilePath"
    run nix profile install $VERBOSE_ARG --profile "$genProfilePath" "$newGenPath"
  else
    run nix-env $VERBOSE_ARG --profile "$genProfilePath" --set "$newGenPath"
  fi

  run --quiet nix-store --realise "$newGenPath" --add-root "$newGenGcPath" --indirect
  if [[ -e "$legacyGenGcPath" ]]; then
    run rm $VERBOSE_ARG "$legacyGenGcPath"
  fi
else
  _i "No change so reusing latest profile generation %s" "$oldGenNum"
fi

linkNewGen


_iNote "Activating %s" "onFilesChange"
if (( ${changedFiles['Library/Fonts/.home-manager-fonts-version']} == 1 )); then
  if [[ -v DRY_RUN || -v VERBOSE ]]; then
    echo "Running onChange hook for" 'Library/Fonts/.home-manager-fonts-version'
  fi
  if [[ ! -v DRY_RUN ]]; then
    run mkdir -p '/Users/atiwatseenark/Library/Fonts/HomeManager'
run /nix/store/1wi2wfhzaj9z4n6k6ivi72w8w8q01r3w-rsync-3.2.7/bin/rsync $VERBOSE_ARG -acL --chmod=u+w --delete \
  '/nix/store/jmnzkdzjqksh8rx0ajg6rgjb4gpiv16i-home-manager-fonts/share/fonts/' '/Users/atiwatseenark/Library/Fonts/HomeManager'

  fi
fi


_iNote "Activating %s" "setupLaunchAgents"
setupLaunchAgents() {
  local oldDir newDir dstDir domain err
  oldDir=""
  err=0
  if [[ -n "${oldGenPath:-}" ]]; then
    oldDir="$(readlink -m "$oldGenPath/LaunchAgents")" || err=$?
    if (( err )); then
      oldDir=""
    fi
  fi
  newDir="$(readlink -m "$newGenPath/LaunchAgents")"
  dstDir='/Users/atiwatseenark/Library/LaunchAgents'
  domain="gui/$UID"
  err=0

  local srcPath dstPath agentFile agentName i bootout_retries
  bootout_retries=10

  find -L "$newDir" -maxdepth 1 -name '*.plist' -type f -print0 \
      | while IFS= read -rd "" srcPath; do
    agentFile="${srcPath##*/}"
    agentName="${agentFile%.plist}"
    dstPath="$dstDir/$agentFile"

    if cmp --quiet "$srcPath" "$dstPath"; then
      continue
    fi
    if [[ -f "$dstPath" ]]; then
      for (( i = 0; i < bootout_retries; i++ )); do
        run /bin/launchctl bootout "$domain/$agentName" || err=$?
        if [[ -v DRY_RUN ]]; then
          break
        fi
        if (( err != 9216 )) &&
          ! /bin/launchctl print "$domain/$agentName" &> /dev/null; then
          break
        fi
        sleep 1
      done
      if (( i == bootout_retries )); then
        warnEcho "Failed to stop '$domain/$agentName'"
        return 1
      fi
    fi
    run install -Dm444 -T "$srcPath" "$dstPath"
    run /bin/launchctl bootstrap "$domain" "$dstPath"
  done

  if [[ ! -e "$oldDir" ]]; then
    return
  fi

  find -L "$oldDir" -maxdepth 1 -name '*.plist' -type f -print0 \
      | while IFS= read -rd "" srcPath; do
    agentFile="${srcPath##*/}"
    agentName="${agentFile%.plist}"
    dstPath="$dstDir/$agentFile"
    if [[ -e "$newDir/$agentFile" ]]; then
      continue
    fi

    run /bin/launchctl bootout "$domain/$agentName" || :
    if [[ ! -e "$dstPath" ]]; then
      continue
    fi
    if ! cmp --quiet "$srcPath" "$dstPath"; then
      warnEcho "Skipping deletion of '$dstPath', since its contents have diverged"
      continue
    fi
    run rm -f $VERBOSE_ARG "$dstPath"
  done
}

setupLaunchAgents



